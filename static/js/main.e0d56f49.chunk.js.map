{"version":3,"sources":["assets/Logo.png","components/Navbar/Navbar-Header/navbarHeader.tsx","components/Navbar/Navbar-Sidebar/navbarSidebar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","toolbar","display","marginTop","marginBottom","alignItems","justifyContent","padding","spacing","mixins","profile","width","height","fabContainer","background","fabHeader","NavbarHeader","props","classes","className","Fab","variant","Avatar","src","Logo","Typography","drawer","flexShrink","whiteSpace","list","backgroundColor","overflow","listItem","textAlign","listIcon","color","margin","listText","NavbarSidebar","Drawer","Divider","List","ListItem","ListItemIcon","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,42BCM3C,IAAMC,EAAYC,YAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,QAAQ,EAAD,CACLC,QAAS,OACTC,UAAW,OACXC,aAAc,OACdC,WAAY,SACZC,eAAgB,SAChBC,QAASR,EAAMS,QAAQ,EAAG,IACvBT,EAAMU,OAAOR,SAElBS,QAAS,CACPC,MAAO,OACPC,OAAQ,QAEVC,aAAc,CACZC,WAAY,OAEdC,UAAW,CACTb,QAAS,cACTG,WAAY,cAkBHW,EAdM,SAACC,GACpB,IAAMC,EAAUrB,IAChB,OACE,yBAAKsB,UAAWD,EAAQjB,SACtB,kBAACmB,EAAA,EAAD,CAAKD,UAAWD,EAAQL,aAAcQ,QAAQ,YAC5C,yBAAKF,UAAWD,EAAQH,WACtB,kBAACO,EAAA,EAAD,CAAQH,UAAWD,EAAQR,QAASa,IAAKC,MACzC,kBAACC,EAAA,EAAD,CAAYJ,QAAQ,MAApB,cClBJxB,EAAYC,YAAW,SAACC,GAAD,OAC3BC,YAAa,CACX0B,OAAQ,CACNf,MALc,IAMdgB,WAAY,EACZC,WAAY,UAEdC,KAAM,CACJxB,WAAY,SACZyB,gBAAiB,OACjBlB,OAAQ,QACRD,MAAO,OACPoB,SAAU,UAEZC,SAAU,CACRC,UAAW,SACX5B,WAAY,SACZF,UAAW,OACXC,aAAc,QAEhB8B,SAAU,CACRC,MAAO,UACPC,OAAQ,IACR7B,QAAS,KAEX8B,SAAU,CACRF,MAAO,YAgDEG,EA5CO,SAACrB,GACrB,IAAMC,EAAUrB,IAChB,OACE,kBAAC0C,EAAA,EAAD,CAAQlB,QAAQ,aACd,kBAAC,EAAD,MACA,kBAACmB,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMtB,UAAWD,EAAQW,MACvB,kBAACa,EAAA,EAAD,CAAUvB,UAAWD,EAAQc,UAC3B,kBAACW,EAAA,EAAD,CAAcxB,UAAWD,EAAQgB,UAC/B,kBAAC,IAAD,OAEF,kBAACT,EAAA,EAAD,CAAYN,UAAWD,EAAQmB,SAAUhB,QAAQ,MAAjD,SAIF,kBAACqB,EAAA,EAAD,CAAUvB,UAAWD,EAAQc,UAC3B,kBAACW,EAAA,EAAD,CAAcxB,UAAWD,EAAQgB,UAC/B,kBAAC,IAAD,OAEF,kBAACT,EAAA,EAAD,CAAYN,UAAWD,EAAQmB,SAAUhB,QAAQ,MAAjD,UAIF,kBAACqB,EAAA,EAAD,CAAUvB,UAAWD,EAAQc,UAC3B,kBAACW,EAAA,EAAD,CAAcxB,UAAWD,EAAQgB,UAC/B,kBAAC,IAAD,OAEF,kBAACT,EAAA,EAAD,CAAYN,UAAWD,EAAQmB,SAAUhB,QAAQ,MAAjD,UAIF,kBAACqB,EAAA,EAAD,CAAUvB,UAAWD,EAAQc,UAC3B,kBAACW,EAAA,EAAD,CAAcxB,UAAWD,EAAQgB,UAC/B,kBAAC,IAAD,OAEF,kBAACT,EAAA,EAAD,CAAYN,UAAWD,EAAQmB,SAAUhB,QAAQ,MAAjD,gBCxEKuB,EARH,WACV,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e0d56f49.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.3e93f8d4.png\";","import React, { useState } from \"react\";\r\nimport { Fab, Avatar, Typography, Divider } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport Logo from \"../../../../src/assets/Logo.png\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    toolbar: {\r\n      display: \"flex\",\r\n      marginTop: \"15px\",\r\n      marginBottom: \"20px\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      padding: theme.spacing(0, 1),\r\n      ...theme.mixins.toolbar\r\n    },\r\n    profile: {\r\n      width: \"32px\",\r\n      height: \"32px\"\r\n    },\r\n    fabContainer: {\r\n      background: \"red\"\r\n    },\r\n    fabHeader: {\r\n      display: \"inline-flex\",\r\n      alignItems: \"center\"\r\n    }\r\n  })\r\n);\r\nconst NavbarHeader = (props: any) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.toolbar}>\r\n      <Fab className={classes.fabContainer} variant=\"extended\">\r\n        <div className={classes.fabHeader}>\r\n          <Avatar className={classes.profile} src={Logo} />\r\n          <Typography variant=\"h5\">Qwerty</Typography>\r\n        </div>\r\n      </Fab>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavbarHeader;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Drawer,\r\n  List,\r\n  Divider,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport FolderSpecialIcon from \"@material-ui/icons/FolderSpecial\";\r\nimport DirectionsRunIcon from \"@material-ui/icons/DirectionsRun\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nimport NavbarHeader from \"../Navbar-Header/navbarHeader\";\r\n\r\nconst drawerWidth = 250;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: \"nowrap\"\r\n    },\r\n    list: {\r\n      alignItems: \"center\",\r\n      backgroundColor: \"#333\",\r\n      height: \"100vh\",\r\n      width: \"auto\",\r\n      overflow: \"hidden\"\r\n    },\r\n    listItem: {\r\n      textAlign: \"center\",\r\n      alignItems: \"center\",\r\n      marginTop: \"20px\",\r\n      marginBottom: \"20px\"\r\n    },\r\n    listIcon: {\r\n      color: \"#ff0202\",\r\n      margin: \"0\",\r\n      padding: \"0\"\r\n    },\r\n    listText: {\r\n      color: \"#eee\"\r\n    }\r\n  })\r\n);\r\nconst NavbarSidebar = (props: any) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Drawer variant=\"permanent\">\r\n      <NavbarHeader />\r\n      <Divider />\r\n      <List className={classes.list}>\r\n        <ListItem className={classes.listItem}>\r\n          <ListItemIcon className={classes.listIcon}>\r\n            <HomeIcon />\r\n          </ListItemIcon>\r\n          <Typography className={classes.listText} variant=\"h6\">\r\n            Home\r\n          </Typography>\r\n        </ListItem>\r\n        <ListItem className={classes.listItem}>\r\n          <ListItemIcon className={classes.listIcon}>\r\n            <AccountCircleIcon />\r\n          </ListItemIcon>\r\n          <Typography className={classes.listText} variant=\"h6\">\r\n            About\r\n          </Typography>\r\n        </ListItem>\r\n        <ListItem className={classes.listItem}>\r\n          <ListItemIcon className={classes.listIcon}>\r\n            <FolderSpecialIcon />\r\n          </ListItemIcon>\r\n          <Typography className={classes.listText} variant=\"h6\">\r\n            Works\r\n          </Typography>\r\n        </ListItem>\r\n        <ListItem className={classes.listItem}>\r\n          <ListItemIcon className={classes.listIcon}>\r\n            <DirectionsRunIcon />\r\n          </ListItemIcon>\r\n          <Typography className={classes.listText} variant=\"h6\">\r\n            Services\r\n          </Typography>\r\n        </ListItem>\r\n      </List>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default NavbarSidebar;\r\n","import React from \"react\";\n\nimport NavbarSidebar from \"./components/Navbar/Navbar-Sidebar/navbarSidebar\";\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <NavbarSidebar />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}